generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type OrdersProducts {
  id        String @map("_id") @db.ObjectId
  name      String
  productId String
  quantity  Int
}

type OrdersShipping {
  address    OrdersShippingAddress
  email      String
  name       String
  phone      String
  tax_exempt String
  tax_ids    String[]
}

type OrdersShippingAddress {
  city        String
  country     String
  line1       String
  line2       String
  postal_code String
  state       String
}

type ProductsImages {
  public_id String
  url       String
}

enum UserRole {
  ADMIN
  USER
}

model newslettersubscriptions {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  v                       Int      @map("__v")
  email                   String   @unique(map: "email_1")
  fullName                String
  isSubscribed            Boolean
  isVerified              Boolean
  subscriptionDate        DateTime @db.Date
  subscriptionPreferences String[]
  unsubscribeToken        String   @unique(map: "unsubscribeToken_1")
  unsubscribeTokenExpires DateTime @db.Date
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  role               UserRole  @default(USER)
  accounts           Account[]
  updatedAt          DateTime  @updatedAt
  Review             Review[]
  Like               Like[]
  Dislike            Dislike[]
  isTwoFactorEnabled Boolean   @default(false)

  createdAt             DateTime                @default(now())
  TwoFactorConfirmation TwoFactorConfirmation[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_token")
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_token")
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("two_factor_confirmation")
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  v               Int              @map("__v")
  createdAt       DateTime         @db.Date
  customerId      String
  delivery_status String
  paymentIntentId String
  payment_status  String
  products        OrdersProducts[]
  shipping        OrdersShipping
  subtotal        Int
  updatedAt       DateTime         @db.Date
  userId          String
  Review          Review[]

  @@map("orders")
}

model Product {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  v                Int              @map("__v")
  category         String
  description      String
  images           ProductsImages[]
  inStock          Boolean
  isFeatured       Boolean
  name             String
  price            Int
  productAddedDate DateTime         @db.Date
  sizes            String[]
  status           String
  stockQuantity    Int
  unitsSold        Int
  Review           Review[]

  @@map("products")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Dislike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dislikes")
}

model Review {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  v         Int              @default(0) @map("__v")
  createdAt DateTime         @default(now())
  dislikes  Dislike[]
  likes     Like[]
  images    ProductsImages[]
  order     Order            @relation(fields: [orderId], references: [id])
  orderId   String           @map("orders") @db.ObjectId
  product   Product          @relation(fields: [productId], references: [id])
  productId String           @map("products") @db.ObjectId
  rating    Int
  review    String
  title     String
  user      User             @relation(fields: [userId], references: [id])
  userId    String           @map("users") @db.ObjectId

  @@map("reviews")
}
